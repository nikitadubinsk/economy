/**
 * Http статусы
 */
export enum EHttpStatus {
  CONTINUE = 100,
  SWITCHING_PROTOCOLS = 101,
  PROCESSING = 102,
  /**
   * "Успешно". Запрос успешно обработан. Что значит "успешно", зависит от метода HTTP, который был запрошен:
   *
   * * GET:   "ПОЛУЧИТЬ". Запрошенный ресурс был найден и передан в теле ответа.
   * * HEAD:  "ЗАГОЛОВОК". Заголовки переданы в ответе.
   * * POST:  "ПОСЫЛКА". Ресурс, описывающий результат действия сервера на запрос, передан в теле ответа.
   * * TRACE: "ОТСЛЕЖИВАТЬ". Тело ответа содержит тело запроса полученного сервером.
   */
  OK = 200,
  /**
   * "Создано".
   *
   * Запрос успешно выполнен и в результате был создан ресурс.
   * Этот код обычно присылается в ответ на запрос PUT "ПОМЕСТИТЬ".
   */
  CREATED = 201,
  /**
   * "Принято". Запрос принят, но ещё не обработан.
   *
   * Не поддерживаемо, т.е., нет способа с помощью HTTP отправить асинхронный ответ позже, который будет показывать
   * итог обработки запроса. Это предназначено для случаев, когда запрос обрабатывается другим процессом или сервером,
   * либо для пакетной обработки.
   */
  ACCEPTED = 202,
  /**
   * "Информация не авторитетна". Этот код ответа означает, что информация, которая возвращена,
   * была предоставлена не от исходного сервера, а из какого-нибудь другого источника.
   * Во всех остальных ситуациях более предпочтителен код ответа 200 OK.
   */
  NON_AUTHORITATIVE_INFORMATION = 203,
  /**
   * "Нет содержимого".
   *
   * Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются.
   * Клиент может использовать их для обновления кешированных заголовков полученных ранее для этого ресурса.
   */
  NO_CONTENT = 204,
  /**
   * "Сбросить содержимое". Этот код присылается, когда запрос обработан, чтобы сообщить клиенту,
   * что необходимо сбросить отображение документа, который прислал этот запрос.
   */
  RESET_CONTENT = 205,
  /**
   * "Частичное содержимое". Этот код ответа используется, когда клиент присылает заголовок диапазона,
   * чтобы выполнить загрузку отдельно, в несколько потоков.
   */
  PARTIAL_CONTENT = 206,
  /**
   * "Множественный выбор". Этот код ответа присылается, когда запрос имеет более чем один из возможных ответов.
   * И User-agent или пользователь должен выбрать один из ответов. Не существует стандартизированного способа выбора
   * одного из полученных ответов.
   */
  AMBIGUOUS = 300,
  /**
   * "Перемещён на постоянной основе".
   *
   * Этот код ответа значит, что URI запрашиваемого ресурса был изменен.
   * Возможно, новый URI будет предоставлен в ответе.
   */
  MOVED_PERMANENTLY = 301,
  /**
   * "Найдено". Этот код ответа значит, что запрошенный ресурс временно изменен.
   *
   * Новые изменения в URI могут быть доступны в будущем.
   * Таким образом, этот URI, должен быть использован клиентом в будущих запросах.
   */
  FOUND = 302,
  /**
   * "Просмотр других ресурсов". Этот код ответа присылается,
   * чтобы направлять клиента для получения запрашиваемого ресурса в другой URI с запросом GET.
   */
  SEE_OTHER = 303,
  /**
   * "Не модифицировано". Используется для кэширования. Это код ответа значит, что запрошенный ресурс не был изменен.
   * Таким образом, клиент может продолжать использовать кэшированную версию ответа.
   */
  NOT_MODIFIED = 304,
  /**
   * "Использовать прокси". Это означает, что запрошенный ресурс должен быть доступен через прокси.
   * Этот код ответа в основном не поддерживается из соображений безопасности.
   */
  USE_PROXY = 305,
  /**
   * Больше не использовать. Изначально подразумевалось, что " последующие запросы должны использовать указанный прокси."
   */
  SWITCH_PROXY = 306,
  /**
   * "Временное перенаправление". Сервер отправил этот ответ, чтобы клиент получил запрошенный ресурс на другой URL-адрес
   * с тем же методом, который использовал предыдущий запрос. Данный код имеет ту же семантику, что код ответа 302 Found,
   * за исключением того, что агент пользователя не должен изменять используемый метод HTTP: если в первом запросе использовался POST,
   * то во втором запросе также должен использоваться POST.
   */
  TEMPORARY_REDIRECT = 307,
  /**
   * "Перенаправление на постоянной основе". Это означает, что ресурс теперь постоянно находится в другом URI,
   * указанном в заголовке Location: HTTP Response. Данный код ответа имеет ту же семантику, что и код ответа 301 Moved Permanently,
   * за исключением того, что агент пользователя не должен изменять используемый метод HTTP: если POST использовался в первом запросе,
   * POST должен использоваться и во втором запросе.
   */
  PERMANENT_REDIRECT = 308,
  /**
   * "Плохой запрос". Этот ответ означает, что сервер не понимает запрос из-за неверного синтаксиса.
   */
  BAD_REQUEST = 400,
  /**
   * "Неавторизовано". Для получения запрашиваемого ответа нужна аутентификация.
   * Статус похож на статус 403, но,в этом случае, аутентификация возможна.
   */
  UNAUTHORIZED = 401,
  /**
   * "Необходима оплата". Этот код ответа зарезервирован для будущего использования.
   * Первоначальная цель для создания этого когда была в использовании его для цифровых платежных систем
   * (на данный момент не используется).
   */
  PAYMENT_REQUIRED = 402,
  /**
   * "Запрещено". У клиента нет прав доступа к содержимому, поэтому сервер отказывается дать надлежащий ответ.
   */
  FORBIDDEN = 403,
  /**
   * "Не найден". Сервер не может найти запрашиваемый ресурс. Код этого ответа, наверно,
   * самый известный из-за частоты его появления в вебе.
   */
  NOT_FOUND = 404,
  /**
   * "Метод не разрешен". Сервер знает о запрашиваемом методе, но он был деактивирован и не может быть использован.
   *
   * Два обязательных метода,  GET и HEAD,  никогда не должны быть деактивированы и не должны возвращать этот код ошибки.
   */
  METHOD_NOT_ALLOWED = 405,
  NOT_ACCEPTABLE = 406,
  PROXY_AUTHENTICATION_REQUIRED = 407,
  REQUEST_TIMEOUT = 408,
  CONFLICT = 409,
  GONE = 410,
  LENGTH_REQUIRED = 411,
  PRECONDITION_FAILED = 412,
  PAYLOAD_TOO_LARGE = 413,
  URI_TOO_LONG = 414,
  UNSUPPORTED_MEDIA_TYPE = 415,
  REQUESTED_RANGE_NOT_SATISFIABLE = 416,
  EXPECTATION_FAILED = 417,
  I_AM_A_TEAPOT = 418,
  UNPROCESSABLE_ENTITY = 422,
  TOO_MANY_REQUESTS = 429,
  /**
   * "Внутренняя ошибка сервера". Сервер столкнулся с ситуацией, которую он не знает как обработать.
   */
  INTERNAL_SERVER_ERROR = 500,
  /**
   * "Не выполнено". Метод запроса не поддерживается сервером и не может быть обработан. Единственные методы,
   * которые сервера должны поддерживать (и, соответственно, не должны возвращать этот код) -  GET и HEAD.
   */
  NOT_IMPLEMENTED = 501,
  /**
   * "Плохой шлюз". Эта ошибка означает что сервер, во время работы в качестве шлюза для получения ответа,
   * нужного для обработки запроса, получил недействительный(недопустимый) ответ.
   */
  BAD_GATEWAY = 502,
  /**
   * "Сервис недоступен". Сервер не готов обрабатывать запрос. Зачастую причинами являются отключение сервера или то, что он перегружен.
   *
   * Обратите внимание, что вместе с этим ответом удобная для пользователей(user-friendly) страница должна отправлять объяснение проблемы.
   * Этот ответ должен использоваться для временных условий и Retry-After: HTTP-заголовок должен, если возможно, содержать
   * предполагаемое время до восстановления сервиса. Веб-мастер также должен позаботиться о заголовках, связанных с кэшем,
   * которые отправляются вместе с этим ответом, так как эти ответы, связанные с временными условиями, обычно не должны кэшироваться.
   */
  SERVICE_UNAVAILABLE = 503,
  /**
   * Этот ответ об ошибке предоставляется, когда сервер действует как шлюз и не может получить ответ вовремя.
   */
  GATEWAY_TIMEOUT = 504,
  /**
   * "HTTP-версия не поддерживается". HTTP-версия, используемая в запроcе, не поддерживается сервером.
   */
  HTTP_VERSION_NOT_SUPPORTED = 505,
}
